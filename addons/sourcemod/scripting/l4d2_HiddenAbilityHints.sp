/* Plugin Template generated by Pawn Studio */

#include <sourcemod>

#define CVAR_FLAGS FCVAR_PLUGIN
#define PLUGIN_VERSION "1.6b"

#define TEXT_SMOKER_RELEASE "Press the MELEE key to let go of your victim."
#define TEXT_SURVIVOR_CRAWL "Press the FORWARD key to crawl."
#define TEXT_JOCKEY_RELEASE "Press the MELEE key to jump off of your victim."
#define TEXT_HUNTER_RELEASE "Press the MELEE key to jump off of your victim."
#define TEXT_CHARGER_RELEASE "Press the MELEE key to let go of your victim."
#define L4D_MAXCLIENTS 19

#define SURVIVORTEAM 2
#define DEBUG 0

new playerInfo[L4D_MAXCLIENTS];

public Plugin:myinfo = 
{
	name = "[L4D2] Hidden Ability Hints",
	author = "Thraka",
	description = "Informs a player of hidden abilities they can use, at the appropriate time.",
	version = PLUGIN_VERSION,
	url = "http://forums.alliedmods.net/showthread.php?p=862626"
}

new Handle:g_hConVar_Crawling;
new Handle:g_hConVar_SmokerRelease;
new Handle:g_hConVar_JockeyRelease;
new Handle:g_hConVar_HunterRelease;
new Handle:g_hConVar_ChargerRelease;

new bool:isDownedEventHooked = false;
new bool:isPulledEventHooked = false;
new bool:isJockiedEventHooked = false;
new bool:isPouncedEventHooked = false;
new bool:isPummelEventHooked = false;

public OnPluginStart()
{
	CreateConVar("l4d_ability_hint_ver", PLUGIN_VERSION, "Version of the hidden abilities hint plugin.", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_NOTIFY);
	
	g_hConVar_Crawling = FindConVar("survivor_allow_crawling");
	g_hConVar_SmokerRelease = FindConVar("tongue_allow_voluntary_release");

	// Survivor crawl
	SetCrawl();
	
	// Smoker release
	SetSmokerRelease();
	
	// Get the console var change events for the ones we care about
	HookConVarChange(g_hConVar_Crawling, ConVarChange_Crawl);
	HookConVarChange(g_hConVar_SmokerRelease, ConVarChange_SmokerRelease);
	
	CreateTimer(10.0, CheckForInfectedRelease);
}

/*
* ===========================================================================================================
* ===========================================================================================================
* 
* CVAR Change events
* 
* ===========================================================================================================
* ===========================================================================================================
*/

public ConVarChange_Crawl(Handle:convar, const String:oldValue[], const String:newValue[])
{
	SetCrawl();
}

public ConVarChange_SmokerRelease(Handle:convar, const String:oldValue[], const String:newValue[])
{
	SetSmokerRelease();
}

public ConVarChange_JockeyRelease(Handle:convar, const String:oldValue[], const String:newValue[])
{
	SetJockeyRelease();
}

public ConVarChange_HunterRelease(Handle:convar, const String:oldValue[], const String:newValue[])
{
	SetHunterRelease();
}

public ConVarChange_ChargerRelease(Handle:convar, const String:oldValue[], const String:newValue[])
{
	SetChargerRelease();
}

SetCrawl()
{
	if (GetConVarInt(g_hConVar_Crawling) == 1)
	{
		if (isDownedEventHooked == false)
		{
			HookEvent("player_incapacitated", Event_SurvivorDown);
			
			HookEvent("lunge_pounce", Event_SurvivorGrabbed);
			HookEvent("pounce_end", Event_SurvivorLetGo);
			
			HookEvent("tongue_grab", Event_SurvivorGrabbed);
			HookEvent("tongue_release", Event_SurvivorLetGo);
			
			HookEvent("jockey_ride", Event_SurvivorGrabbed);
			HookEvent("jockey_ride_end", Event_SurvivorLetGo);
			
			HookEvent("charger_pummel_start", Event_SurvivorGrabbed);
			HookEvent("charger_pummel_end", Event_SurvivorLetGo);
			
			isDownedEventHooked = true;
		}
	}
	else
	{
		if (isDownedEventHooked == true)
		{
			UnhookEvent("player_incapacitated", Event_SurvivorDown);
			
			UnhookEvent("lunge_pounce", Event_SurvivorGrabbed);
			UnhookEvent("pounce_end", Event_SurvivorLetGo);
			
			UnhookEvent("tongue_grab", Event_SurvivorGrabbed);
			UnhookEvent("tongue_release", Event_SurvivorLetGo);
			
			UnhookEvent("jockey_ride", Event_SurvivorGrabbed);
			UnhookEvent("jockey_ride_end", Event_SurvivorLetGo);
			
			UnhookEvent("charger_pummel_start", Event_SurvivorGrabbed);
			UnhookEvent("charger_pummel_end", Event_SurvivorLetGo);
			isDownedEventHooked = false;
		}
	}
	
	#if DEBUG
	if (isDownedEventHooked == true)
		DebugPrint("CRAWLING on");
	else
		DebugPrint("CRAWLING off");
	#endif
	
}

SetSmokerRelease()
{
	if (GetConVarInt(g_hConVar_SmokerRelease) == 1)
	{
		if (isPulledEventHooked == false)
		{
			HookEvent("tongue_grab", Event_SmokerGrabbed);
			isPulledEventHooked = true;
		}
	}
	else
	{
		if (isPulledEventHooked == true)
		{
			UnhookEvent("tongue_grab", Event_SmokerGrabbed);
			isPulledEventHooked = false;
		}
	}	
	#if DEBUG
	if (isPulledEventHooked == true)
		DebugPrint("SMOKER RELEASE on");
	else
		DebugPrint("SMOKER RELEASE off");
	#endif
}

SetJockeyRelease()
{
	if (g_hConVar_JockeyRelease != INVALID_HANDLE)
	{
		if (GetConVarInt(g_hConVar_JockeyRelease) == 1)
		{
			if (isJockiedEventHooked == false)
			{
				HookEvent("jockey_ride", Event_JockeyRide);
				isJockiedEventHooked = true;
			}
		}
		else
		{
			if (isJockiedEventHooked == true)
			{
				UnhookEvent("jockey_ride", Event_JockeyRide);
				isJockiedEventHooked = false;
			}
		}
	}
	
	#if DEBUG
	if (isJockiedEventHooked == true)
		DebugPrint("JOCKEY RELEASE on");
	else
		DebugPrint("JOCKEY RELEASE off");
	#endif
}

SetHunterRelease()
{
	if (GetConVarInt(g_hConVar_HunterRelease) == 1)
	{
		if (isPouncedEventHooked == false)
		{
			HookEvent("lunge_pounce", Event_HunterPounced);
			isPouncedEventHooked = true;
		}
	}
	else
	{
		if (isPouncedEventHooked == true)
		{
			UnhookEvent("lunge_pounce", Event_HunterPounced);
			isPouncedEventHooked = false;
		}
	}	
	
	#if DEBUG
	if (isJockiedEventHooked == true)
		DebugPrint("HUNTER RELEASE on");
	else
		DebugPrint("HUNTER RELEASE off");
	#endif
}

SetChargerRelease()
{
	if (GetConVarInt(g_hConVar_ChargerRelease) == 1)
	{
		if (isPummelEventHooked == false)
		{
			HookEvent("charger_pummel_start", Event_ChargerPummelStart);
			isPummelEventHooked = true;
		}
	}
	else
	{
		if (isPummelEventHooked == true)
		{
			UnhookEvent("charger_pummel_start", Event_ChargerPummelStart);
			isPummelEventHooked = false;
		}
	}	
	
	#if DEBUG
	if (isJockiedEventHooked == true)
		DebugPrint("CHARGER RELEASE on");
	else
		DebugPrint("CHARGER RELEASE off");
	#endif
}

public Action:CheckForInfectedRelease(Handle:timer, any:client)
{
	g_hConVar_JockeyRelease = FindConVar("l4d2_jockey_dismount_on");
	g_hConVar_HunterRelease = FindConVar("l4d2_hunter_release_on");
	g_hConVar_ChargerRelease = FindConVar("l4d2_charger_release_on");
	
	if (g_hConVar_JockeyRelease != INVALID_HANDLE)
	{
		HookConVarChange(g_hConVar_JockeyRelease, ConVarChange_JockeyRelease);
		SetJockeyRelease();
	}
	
	if (g_hConVar_HunterRelease != INVALID_HANDLE)
	{
		HookConVarChange(g_hConVar_HunterRelease, ConVarChange_HunterRelease);
		SetHunterRelease();
	}
	
	if (g_hConVar_ChargerRelease != INVALID_HANDLE)
	{
		HookConVarChange(g_hConVar_ChargerRelease, ConVarChange_ChargerRelease);
		SetChargerRelease();
	}
}

/*
* ===========================================================================================================
* ===========================================================================================================
* 
* Normal Hooks\Events
* 
* ===========================================================================================================
* ===========================================================================================================
*/


public Event_SmokerGrabbed(Handle:event, const String:name[], bool:dontBroadcast)
{
	new attackerClient = GetClientOfUserId(GetEventInt(event, "userid"));
	PrintHintText(attackerClient, TEXT_SMOKER_RELEASE);
	
	#if DEBUG
	PrintToChatAll("[DEBUG] Smoker (%i, %i) grabbed client (%i)", GetEventInt(event, "userid"), attackerClient, GetEventInt(event, "victim"));
	LogMessage("[DEBUG] Smoker (%i, %i) grabbed client (%i)", GetEventInt(event, "userid"), attackerClient, GetEventInt(event, "victim"));
	#endif
}

public Event_HunterPounced(Handle:event, const String:name[], bool:dontBroadcast)
{
	new attackerClient = GetClientOfUserId(GetEventInt(event, "userid"));
	PrintHintText(attackerClient, TEXT_HUNTER_RELEASE);
}

public Event_ChargerPummelStart(Handle:event, const String:name[], bool:dontBroadcast)
{
	new attackerClient = GetClientOfUserId(GetEventInt(event, "userid"));
	PrintHintText(attackerClient, TEXT_CHARGER_RELEASE);
}


public Event_JockeyRide(Handle:event, const String:name[], bool:dontBroadcast)
{
	new attackerClient = GetClientOfUserId(GetEventInt(event, "userid"));
	PrintHintText(attackerClient, TEXT_JOCKEY_RELEASE);
	
	#if DEBUG
	PrintToChatAll("[DEBUG] Jockey (%i, %i) grabbed client (%i)", GetEventInt(event, "userid"), attackerClient, GetEventInt(event, "victim"));
	LogMessage("[DEBUG] Jockey (%i, %i) grabbed client (%i)", GetEventInt(event, "userid"), attackerClient, GetEventInt(event, "victim"));
	#endif
}

public Event_SurvivorDown(Handle:event, const String:name[], bool:dontBroadcast)
{
	new survivorClient = GetClientOfUserId(GetEventInt(event, "userid"));
	
	if (playerInfo[survivorClient] != 1)
		if (GetClientTeam(survivorClient) == SURVIVORTEAM)
			PrintHintText(survivorClient, TEXT_SURVIVOR_CRAWL);
}

public Event_SurvivorGrabbed(Handle:event, const String:name[], bool:dontBroadcast)
{
	
	new survivorClient = GetClientOfUserId(GetEventInt(event, "victim"));
	playerInfo[survivorClient] = 1;
	
	#if DEBUG
	PrintToChatAll("[DEBUG] Survivor (%i, %i) is grabbed!",  GetEventInt(event, "victim"), survivorClient);
	LogMessage("[DEBUG] Survivor (%i, %i) is grabbed!",  GetEventInt(event, "victim"), survivorClient);
	#endif
}

public Event_SurvivorLetGo(Handle:event, const String:name[], bool:dontBroadcast)
{
	
	if (event != INVALID_HANDLE)
	{	
		new survivorClient = GetClientOfUserId(GetEventInt(event, "victim"));
		
		if (survivorClient != 0)
		{
			playerInfo[survivorClient] = 0;
			
			// Check to see if they are incap, if so, print to them
			if (GetEntProp(survivorClient, Prop_Send, "m_isIncapacitated"))
				PrintHintText(survivorClient, TEXT_SURVIVOR_CRAWL);
		}
		#if DEBUG
		else
			DebugPrint("Event_SurvivorLetGo event: SurvivorClient is invalid!!");
		#endif
	}
	#if DEBUG
	else
		DebugPrint("Event_SurvivorLetGo event is invalid!!");
	#endif
	
}

// Check the console variable for if crawling is enabled and configure
//


#if DEBUG
DebugPrint(const String:text[])
{
	PrintToChatAll(text);
	LogMessage(text);
}
#endif
